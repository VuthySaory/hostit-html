pipeline {
    agent any

    environment {
        // MAIN Image Manager
        GIT_REPO_URL = "https://github.com/VuthySaory/hostit-html.git"
        DOCKER_HUB_REPOSITORY = "vuthysaory"
        DOCKER_HUB_IMAGE = "hostit_html_image"
        DOCKER_CREDENTIALS = "docker-hub-credentials"
        CONTAINER_NAME = "hostit_html_container"
        CONTAINER_PORT = "8090"
    }

    parameters {
        gitParameter(name: 'TAG', type: 'PT_TAG', defaultValue: '', description: 'Select the Git tag to build.')
        gitParameter(name: 'BRANCH', type: 'PT_BRANCH', defaultValue: '', description: 'Select the Git branch to build.')
        
        // Parameter for selecting the deployment action
        choice(name: 'ACTION',choices: ['deploy', 'rollback'],description: 'Choose whether to deploy a new version or rollback to a previous version.')
    }

    stages {
        // Checkout git code
        stage('Checkout Code') {
            steps {
                script {
                   try{
                        if (params.TAG) { 
                            echo "Checking out tag: ${params.TAG}"
                            checkout([$class: 'GitSCM', branches: [[name: "refs/tags/${params.TAG}"]],userRemoteConfigs: [[url:env.GIT_REPO_URL]]
                            ])
                        } else {
                            echo "Checking out branch: ${params.BRANCH}"
                            checkout([$class: 'GitSCM',branches: [[name: "${params.BRANCH}"]], userRemoteConfigs: [[url: env.GIT_REPO_URL]]
                            ])
                        }

                        if(params.ACTION == "rollback"){
                            echo "Status: ${params.ACTION} => on Tag: ${params.TAG}"
                        }else {
                            echo "Status: ${params.ACTION} => Building from ${env.CHECKOUT_REF}"
                        }
                   }catch(Exception e) {
                        echo "Error during checkout process : ${e.message }"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }

        // Build and push Docker image
        stage('Build and Push Docker Image') {
            steps {
                script {
                    try{
                        if(params.ACTION == "rollback"){
                            echo "Status: ${params.ACTION} => on Tag: ${params.TAG}"
                        }else {
                            // Check if the Docker image exists remotely
                            def imageExists = existingImage("${env.DOCKER_HUB_REPOSITORY}/${env.DOCKER_HUB_IMAGE}", params.TAG)

                            if (imageExists){
                                echo "Image ${env.DOCKER_HUB_REPOSITORY}/${env.DOCKER_HUB_IMAGE}:${params.TAG} already exists on Docker Hub. Skipping build."

                            }else{
                                // Implement your build logic here
                                echo "Status: ${params.ACTION} =>Building from ${env.CHECKOUT_REF}"
                     
                                // Example build command
                                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                                    sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                                }
                                sh """
                                    docker build -t ${env.DOCKER_HUB_REPOSITORY}/${env.DOCKER_HUB_IMAGE}:${params.TAG} .
                       
                                    docker push ${env.DOCKER_HUB_REPOSITORY}/${env.DOCKER_HUB_IMAGE}:${params.TAG}
                                """
                                echo "Status: ${params.ACTION} => Build done of ${env.DOCKER_HUB_REPOSITORY}/${env.DOCKER_HUB_IMAGE}:${params.TAG} and Push to: ${env.DOCKER_HUB_REPOSITORY}/${env.DOCKER_HUB_IMAGE}:${params.TAG} "
                                
                            }
                        }
                    }catch(Exception e) {
                        echo "Error during checkout process : ${e.message}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    } 
                }
            }
        }

        stage("Remove Old Contianer"){
            steps{
                script{
                    try{
                        // Example command to remove a container
                        echo "Removing old container"
                        // docker rm -f ${env.CONTAINER_NAME}
                        def commandWrite = """
                            docker ps -q --filter "name=$CONTAINER_NAME" | grep -q . && docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME || echo "No running container to remove"
                        """
                        def status = sh(script: commandWrite, returnStatus: true)
                        if(!status){
                 
                            echo "Status: ${params.ACTION} => Removed old container ${env.CONTAINER_NAME}"
                        }else {
                            currentBuild.result = 'FAILURE'
                            throw e
                        }
                    }catch(Exception e) {
                        echo "Error during checkout process : ${e.message}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }  
                }
            }
        }

        stage("Deploying"){
            steps{
                script{
                    try{
                        def commandWrite = """
                            docker run -d --name ${env.CONTAINER_NAME} -p ${env.CONTAINER_PORT}:80 ${env.DOCKER_HUB_REPOSITORY}/${env.DOCKER_HUB_IMAGE}:${params.TAG}
                        """
                        def status = sh(script: commandWrite, returnStatus: true)
                        if(!status){
                            echo "Status: ${params.ACTION} => Deployed ${env.DOCKER_HUB_REPOSITORY}/${env.DOCKER_HUB_IMAGE}:${params.TAG} to ${env.CONTAINER_NAME}"
                        }else {
                            currentBuild.result = 'FAILURE'
                            echo "Error during checkout process : ${e.message}"
                            throw e
                        }
                    }catch(Exception e) {
                        //sendTelegramMessage("Error during checkout process : ${e.message}")
                        echo "Error during checkout process : ${e.message}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }  
                }
            }
        }

        // cleaning up old docker images
        stage('Cleanup Old Docker Images') {
            steps {
                script {
                    try {
                        echo "üßπ Cleaning up old Docker images..."

                        // 1Ô∏è‚É£ Remove old Docker images locally
                        sh """
                            docker images --format '{{.Repository}}:{{.Tag}}' | grep '${DOCKER_HUB_REPOSITORY}/${DOCKER_HUB_IMAGE}' | grep -v '${params.TAG}' | xargs -r docker rmi -f
                        """
                        echo "‚úÖ Old Docker images removed locally."
                        
                        
                    } catch (Exception e) {
                        echo "‚ùå Error during cleanup: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
    }
    post {
        success {
            echo "‚úÖ Build Successful!"
        }
        failure {
            echo "‚ùå Build Failed!"
        }
        always {
            echo "üîÑ This runs no matter what."
        }
    }
}

// Function to check if Docker image exists remotely on Docker Hub
def existingImage(String imageName, String tag) {
    def response = sh(script: "curl -s https://registry.hub.docker.com/v2/repositories/${imageName}/tags/${tag}/", returnStdout: true).trim()
    
    // If the response contains "not found" or is empty, the image doesn't exist
    if (response.contains("not found") || response.isEmpty()) {
        return false // Image doesn't exist
    } else {
        return true // Image exists
    }
}
